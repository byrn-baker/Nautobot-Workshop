- name: Reset source facts at the start of this peer iteration
  set_fact:
    source_interface: ""
    source_interface_id: ""
    source_address: ""
    source_address_id: ""

- name: Look up additional info
  networktocode.nautobot.query_graphql:
    url: "{{ nb_url }}"
    token: "{{ nb_token }}"
    validate_certs: false
    query: "{{ query_string }}"
  register: graphql_results

- name: Getting peer device data
  set_fact:
    peer_device: "{{ graphql_results.data.ip_addresses[0].interface_assignments[0].interface.device.name }}"
    peer_routing_instance_id: "{{ graphql_results.data.ip_addresses[0].interface_assignments[0].interface.device.bgp_routing_instances[0].id }}"
    peer_interface: "{{ graphql_results.data.ip_addresses[0].interface_assignments[0].interface.name }}"
    peer_interface_id: "{{ graphql_results.data.ip_addresses[0].interface_assignments[0].interface.id }}"
    peer_address_id: "{{ graphql_results.data.ip_addresses[0].id }}"
    peer_asn_id: "{{ graphql_results.data.autonomous_systems[0].id }}"

# 1. Set the peer_address fact for use in this iteration
- name: Set peer_address variable for this loop iteration
  set_fact:
    peer_address: "{{ item.1.peer_address }}"

# 2. Try to find a local interface with a connected_interface IP matching the peer_address (eBGP)
- name: Find eBGP source interface (directly connected to peer)
  set_fact:
    source_interface: "{{ item.name }}"
    source_interface_id: "{{ item.id }}"
    source_address: "{{ local_ip.address }}"
    source_address_id: "{{ local_ip.id }}"
  vars:
    local_ip: >-
      {{
        (item.ip_addresses | selectattr('address', 'search', '\\.' if ':' not in peer_address else ':') | list | first)
        if item.ip_addresses is defined else {}
      }}
  loop: "{{ graphql_results.data.devices[0].interfaces }}"
  when: >
    item.connected_interface is defined and
    item.connected_interface.ip_addresses is defined and
    (
      item.connected_interface.ip_addresses
      | selectattr('address', 'equalto', peer_address) | list | length > 0
    )
    and (source_address_id is not defined or source_address_id == '')

# 3. Fallback: Use Loopback0 for iBGP (if eBGP not found)
- name: Fallback to Loopback0 for iBGP if no interface match found
  set_fact:
    source_interface: "{{ loopback.name }}"
    source_interface_id: "{{ loopback.id }}"
    source_address: "{{ found_loopback_ip.address }}"
    source_address_id: "{{ found_loopback_ip.id }}"
  vars:
    interfaces: "{{ graphql_results.data.devices[0].interfaces }}"
    loopback: "{{ interfaces | selectattr('name', 'equalto', 'Loopback0') | list | first }}"
    peer_af: "{{ 'v6' if ':' in peer_address else 'v4' }}"
    found_loopback_ip: >-
      {{
        (
          loopback.ip_addresses
          | selectattr(
              'address',
              'search',
              (
                peer_address.split('/')[0].split(':')[0]
                if peer_af == 'v6'
                else peer_address.split('/')[0].rsplit('.', 1)[0]
              )
            )
          | list
          | first
        )
        if loopback is defined and loopback.ip_addresses is defined else {}
      }}
  when:
    - (source_address_id is not defined or source_address_id == '')
    - loopback is defined
    - found_loopback_ip is defined and found_loopback_ip != {}

# 4. Debug: Show selection for troubleshooting
- name: Debug what will be used for this PeerEndpoint
  debug:
    msg:
      - "Device: {{ item.0.device }}"
      - "Peer address: {{ peer_address }}"
      - "Source interface: {{ source_interface | default('NOT FOUND') }} ({{ source_interface_id | default('NOT FOUND') }})"
      - "Source address: {{ source_address | default('NOT FOUND') }} ({{ source_address_id | default('NOT FOUND') }})"

# 5. Fail clearly if nothing was found (should never trigger with your data)
- name: Fail if source_address_id is not set
  fail:
    msg: "No valid source_address_id for {{ item.0.device }} peering to {{ peer_address }}! Loopback: {{ loopback | default('NOT FOUND') }}, Peer: {{ peer_address }}"
  when: source_address_id is not defined or source_address_id == ''


- name: Set local ASN ID
  set_fact:
    local_asn_id: "{{ graphql_results.data.devices[0].bgp_routing_instances[0].autonomous_system.id }}" 

- name: Set Active Status ID
  set_fact:
    active_status_id: "{{ graphql_results.data.statuses[0].id }}"

- name: Debug PeerEndpoint API payload
  debug:
    msg:
      - "device: {{ item.0.device }}"
      - "routing_instance: {{ item.0.id }}"
      - "source_ip: {{ source_address }}"
      - "source_ip_id: {{ source_address_id }}"
      - "source_interface: {{ source_interface_id }}"
      - "peer_address: {{ item.1.peer_address }}"
      - "peer_device: {{ peer_device }}"
      - "peer_routing_instance: {{ peer_routing_instance_id }}"


- name: Create BGP Peering for both endpoints
  ansible.builtin.uri:
    url: "{{ nb_url }}/api/plugins/bgp/peerings/"
    method: POST
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      Authorization: "Token {{ nb_token }}"
    body_format: json
    body:
      status:
        id: "{{ active_status_id }}"
    return_content: true
    status_code: 201
    validate_certs: false
  register: bgp_peering_result

- name: Create BGP PeerEndpoints for {{ item.0.device }}
  ansible.builtin.uri:
    url: "{{ nb_url }}/api/plugins/bgp/peer-endpoints/?format=json"
    method: POST
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      Authorization: "Token {{ nb_token }}"
    body_format: json
    body:
      description: "{{ peer_device }}"
      enabled: true
      peering: "{{ bgp_peering_result.json.id }}"
      routing_instance:
        id: "{{ item.0.id}}"
      autonomous_system:
        id: "{{ local_asn_id }}"
      source_ip:
        id: "{{ source_address_id }}"
      source_interface:
        id: "{{ source_interface_id }}"
    return_content: true
    status_code: 201
    validate_certs: false
  register: bgp_peer_endpoint_result

- name: Set AFI-SAFI for BGP PeerEndpoint-A
  ansible.builtin.uri:
    url: "{{ nb_url }}api/plugins/bgp/peer-endpoint-address-families/?format=json"
    method: POST
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      Authorization: "Token {{ nb_token }}"
    body_format: json
    body:
      afi_safi: "{{ item.1.afi }}"
      import_policy: "{{ item.1.in_route_map }}"
      export_policy: "{{ item.1.out_route_map }}"
      multipath: false
      peer_endpoint:
        id: "{{ bgp_peer_endpoint_result.json.id }}"
    return_content: true
    status_code: 201
    validate_certs: false
  
- name: Create BGP PeerEndpoint for {{ peer_device }}
  ansible.builtin.uri:
    url: "{{ nb_url }}/api/plugins/bgp/peer-endpoints/?format=json"
    method: POST
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      Authorization: "Token {{ nb_token }}"
    body_format: json
    body:
      description: "{{ peer_device }}"
      enabled: true
      peering: "{{ bgp_peering_result.json.id }}"
      routing_instance:
        id: "{{ peer_routing_instance_id}}"
      autonomous_system:
        id: "{{ peer_asn_id }}"
      source_ip:
        id: "{{ peer_address_id }}"
      source_interface:
        id: "{{ peer_interface_id }}"
    return_content: true
    status_code: 201
    validate_certs: false
  register: bgp_peer_endpoint_result

- name: Set AFI-SAFI for BGP PeerEndpoint-Z
  ansible.builtin.uri:
    url: "{{ nb_url }}api/plugins/bgp/peer-endpoint-address-families/?format=json"
    method: POST
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      Authorization: "Token {{ nb_token }}"
    body_format: json
    body:
      afi_safi: "{{ item.1.afi }}"
      import_policy: "{{ item.1.in_route_map }}"
      export_policy: "{{ item.1.out_route_map }}"
      multipath: false
      peer_endpoint:
        id: "{{ bgp_peer_endpoint_result.json.id }}"
    return_content: true
    status_code: 201
    validate_certs: false