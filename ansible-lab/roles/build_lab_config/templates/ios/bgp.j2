{% for instance in bgp_routing_instances %}
router bgp {{ instance['autonomous_system']['asn'] }}
 bgp log-neighbor-changes
{% for pg in instance.get('peer_groups', []) %}
 neighbor {{ pg['name'] }} peer-group
{% endfor -%}
{% for ep in instance['endpoints'] -%}
{% set peer_int = ep['source_interface']['name'] %}
{% set peer = ep['peer'] %}
{% set peer_ip = peer['source_ip']['address'] | ipaddr('address') %}
{% if ep.get('peer_group') %}
 neighbor {{ peer_ip }} peer-group {{ ep['peer_group']['name'] }}
{% else %}
 neighbor {{ peer_ip }} remote-as {% if peer['autonomous_system'] is defined and peer['autonomous_system'] is not none %}{{ peer['autonomous_system']['asn'] }}{% elif peer['routing_instance'] is defined and peer['routing_instance']['autonomous_system'] is defined and peer['routing_instance']['autonomous_system'] is not none %}{{ peer['routing_instance']['autonomous_system']['asn'] }}{% endif %}
{% endif %}
{% if peer['description'] %}
 neighbor {{ peer_ip }} description {{ peer['description'] }}
{% endif %}
{% if 'Loopback' in peer_int %}
 neighbor {{ peer_ip }} update-source {{ peer_int }}
{% endif %}
{% endfor %}
{% set afis = [] %}
{% for pg in instance.get('peer_groups', []) %}
  {% for af in pg.get('address_families', []) %}
    {% if af['afi_safi'] not in afis %}
      {% do afis.append(af['afi_safi']) %}
    {% endif %}
  {% endfor %}
{% endfor %}
{% for afi in afis -%}
address-family {{ 'ipv4' if 'IPV4_UNICAST' in afi else 'ipv6' }} unicast
{% for ep in instance['endpoints'] %}
{% set peer_ip = ep['peer']['source_ip']['address'] | ipaddr('address') %}
{% if ep.get('peer_group') %}
  {% set pg_name = ep['peer_group']['name'] %}
  {% set pg = (instance['peer_groups'] | selectattr('name', 'equalto', pg_name) | list | first) %}
  {% for pg_afi in pg.get('address_families', []) %}
    {% if pg_afi['afi_safi'] == afi %}
 neighbor {{ peer_ip }} activate
      {% if pg_afi['import_policy'] %}
 neighbor {{ peer_ip }} route-map {{ pg_afi['import_policy'] }} in
      {% endif %}
      {% if pg_afi['export_policy'] %}
 neighbor {{ peer_ip }} route-map {{ pg_afi['export_policy'] }} out
      {% endif %}
    {% endif %}
  {% endfor %}
{% else %}
  {% for af in ep['peer'].get('address_families', []) %}
    {% if af['afi_safi'] == afi %}
 neighbor {{ peer_ip }} activate
      {% if af['import_policy'] %}
 neighbor {{ peer_ip }} route-map {{ af['import_policy'] }} in
      {% endif %}
      {% if af['export_policy'] %}
 neighbor {{ peer_ip }} route-map {{ af['export_policy'] }} out
      {% endif %}
    {% endif %}
  {% endfor %}
{% endif %}
{% endfor %}
exit-address-family
{% endfor -%}
!
{% endfor %}
